trigger:
  batch: true
  branches:
    include:
      - "*"
  paths:
    include:
      - tasks/DependencyCheck/*
      - scripts/Set-Version.ps1

pr: none

workspace:
  clean: all

variables:
  - group: 'Prod Shared Resources'

pool:
  name: 'DAS - Continuous Integration'

steps:
# set version
- task: UseGitVersion@5
  inputs:
    versionSpec: 5.x
    useConfigFile: true
    configFilePath: '$(System.DefaultWorkingDirectory)/tasks/DependencyCheck/GitVersion.yml'
- task: PowerShell@2
  displayName: Set Task Version
  inputs:
    filePath: $(System.DefaultWorkingDirectory)/scripts/Set-Version.ps1
    arguments: -TaskRoot $(System.DefaultWorkingDirectory)/tasks/DependencyCheck -Verbose
    pwsh: false 
# build and package application   
- task: Npm@1
  displayName: 'npm install --production'
  inputs:
    command: custom
    workingDir: '$(System.DefaultWorkingDirectory)/tasks/DependencyCheck/task'
    verbose: false
    customCommand: 'install --production'
- task: Npm@1
  displayName: 'npm install -g typescript'
  inputs:
    command: custom
    verbose: false
    customCommand: 'install -g typescript'
- powershell: |
    Copy-Item "$(System.DefaultWorkingDirectory)/tasks/DependencyCheck/task/tests" -Destination "$(System.DefaultWorkingDirectory)/temp-tests" -Recurse
    Remove-Item "$(System.DefaultWorkingDirectory)/tasks/DependencyCheck/task/tests" -Recurse
  displayName: 'PowerShell Script: Move tests folder to a temporary location'
- script: tsc
  workingDirectory: $(System.DefaultWorkingDirectory)/tasks/DependencyCheck/task
  displayName: 'Command Line Script: compile typescript application'
- powershell: |
    $FileName = "$(System.DefaultWorkingDirectory)/tasks/DependencyCheck/task/node_modules/csvtojson/test/data/data#139"
    if (Test-Path $FileName)
    {
      Remove-Item $FileName
    }
  displayName: 'PowerShell Script: Remove node module csvtojson data#139 file'
- task: ms-devlabs.vsts-developer-tools-build-tasks.tfx-installer-build-task.TfxInstaller@3
  displayName: 'Use Node CLI for Azure DevOps (tfx-cli): latest'
- task: ms-devlabs.vsts-developer-tools-build-tasks.package-extension-build-task.PackageAzureDevOpsExtension@3
  displayName: 'Package Extension: /tasks/DependencyCheck'
  inputs:
    rootFolder: '$(System.DefaultWorkingDirectory)/tasks/DependencyCheck'
    outputPath: '$(System.DefaultWorkingDirectory)/release/bin'
# upload vulnerability files
- task: DownloadGitHubRelease@0
  displayName: 'Download GitHub Release'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  inputs:
    connection: SFA
    userRepository: 'SkillsFundingAgency/das-platform-automation'
    defaultVersionType: specificTag
    version: 3.0.0
- task: AzurePowerShell@4
  displayName: 'Azure PowerShell script: $(System.ArtifactsDirectory)/New-StorageAccountSASToken.ps1'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  inputs:
    azureSubscription: SFA-DIG-Prod-ARM
    ScriptPath: '$(System.ArtifactsDirectory)/New-StorageAccountSASToken.ps1'
    ScriptArguments: '-ResourceGroup "$(SharedResourceGroupName)" -StorageAccount "$(SharedStorageAccountName)" -Service "$(StorageAccountService)" -ResourceType "$(StorageAccountResourceType)" -Permissions "$(StorageAccountPermissions)" -ExpiryInMinutes "$(SasUriExpiryInMinutes)" -OutputVariable "WriteStorageAccountContainerSasUri"'
    azurePowerShellVersion: LatestVersion
    pwsh: true
- task: PowerShell@2
  env:
    WRITE_STORAGE_ACCOUNT_CONTAINER_SAS_URI: $(WriteStorageAccountContainerSasUri)
  displayName: 'PowerShell Script: Restore tests folder, add a .env file for npm test, renamed task folder to GITVERSION_MAJORMINORPATCH'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  inputs:
    filePath: $(System.DefaultWorkingDirectory)/tasks/DependencyCheck/scripts/Initialise-TaskExecutionResources.ps1
    arguments: -RootDirectory $(System.DefaultWorkingDirectory) -SharedStorageAccountName $(SharedStorageAccountName) -StorageAccountContainerName $(StorageAccountContainerName) -StorageAccountService $(StorageAccountService)
    pwsh: false
- task: Npm@1
  displayName: 'npm install'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  inputs:
    workingDir: '$(System.DefaultWorkingDirectory)/tasks/DependencyCheck/$(GITVERSION.MAJORMINORPATCH)'
    verbose: false
- script: tsc
  workingDirectory: $(System.DefaultWorkingDirectory)/tasks/DependencyCheck/$(GITVERSION.MAJORMINORPATCH)
  displayName: 'Command Line Script: compile typescript application'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
- task: Npm@1
  displayName: 'npm test to create the new versioned vulnerability files on the storage account'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  inputs:
    command: custom
    workingDir: '$(System.DefaultWorkingDirectory)/tasks/DependencyCheck/$(GITVERSION.MAJORMINORPATCH)'
    verbose: false
    customCommand: 'test'
# publish extension
- template: ../../pipeline-templates/step/extension-publish.yml
  parameters:
    BuildDirectory: $(System.DefaultWorkingDirectory)/release/bin
    ExtensionName: DependencyCheck

