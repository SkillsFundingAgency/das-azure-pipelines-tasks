name: "3.1.$(rev:r)"

trigger:
  batch: true
  branches:
    include:
      - "*"
  paths:
    include:
      - tasks/EnvironmentConfiguration
      - scripts/Build-Task.ps1

pr: none

workspace:
  clean: all

pool:
  name: 'DAS - Continuous Integration'

steps:
# build and test extension
- task: PowerShell@2
  displayName: Build Task
  inputs:
    filePath: $(System.DefaultWorkingDirectory)/scripts/Build-Task.ps1
    arguments:  -Build -TaskRoot $(System.DefaultWorkingDirectory)/tasks/EnvironmentConfiguration
    failOnStderr: false
    pwsh: false
    workingDirectory: $(System.DefaultWorkingDirectory)
- task: PowerShell@2
  displayName: Test
  inputs:
    filePath: $(System.DefaultWorkingDirectory)/release/EnvironmentConfiguration/tests/Start-UnitTest.ps1
    failOnStderr: true
    pwsh: false
    workingDirectory: $(System.DefaultWorkingDirectory)
- task: PublishTestResults@2
  inputs:
    testResultsFormat: "NUnit"
    testResultsFiles: $(System.DefaultWorkingDirectory)/release/EnvironmentConfiguration/tests/Test-Pester.XML
  displayName: "Publish results"
  condition: succeededOrFailed()
# publish extension
- template: ../../pipeline-templates/step/extension-publish.yml
  parameters:
    BuildDirectory: $(System.DefaultWorkingDirectory)/release/EnvironmentConfiguration
    ExtensionName: EnvironmentConfiguration









- task: PackageVSTSExtension@1
  inputs:
    rootFolder: $(System.DefaultWorkingDirectory)/release/${{ parameters.name }}
    outputPath: $(System.DefaultWorkingDirectory)/release/bin
    updateTasksVersion: false
  displayName: "Package vsix"
- task: CopyFiles@2
  inputs:
    Contents: |
      release/bin/*.vsix
      release/$(name)/**
    TargetFolder: "$(build.artifactstagingdirectory)/publish"
    OverWrite: true
  displayName: "Copy Files to: $(build.artifactstagingdirectory)"
- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: "$(build.artifactstagingdirectory)/publish"
  displayName: "Publish Artifact"
